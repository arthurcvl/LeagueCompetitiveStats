''' 
**it will need a empty list of team first
1 - first i walk trough all the .csv file, instantiating the MATCH object and adding it
to the respective TEAM object, if it cant find a team object with same id on the list it will
instantiate a team object with the name/id of the line and put it inside the list

when this proccess finishes the TEAMS objects will be converted to json and the new jsonl file
will be generated

//Each "game" has two records from each team side 

// I create a jsonl data frame with is a complet data records 
based on the last .csv file download and every time i send a message
changing date i update that

//Maybe to accomplish that i w ill need to keep record of 3 tables:
-Old jsonl
-New jsonl
-Jsonl only with the teams that had stats changed 
**this is the file i will send to cloud storage

-every time the "full process" occour and a message is send using kafka
the old jsonl is updated to be equal to the new jsonl

// in side of java i will just take the data in cloud and do
// saveAll so it will change or update a team

MESMO QUE PAREÇA QUE VAI DUPLICAR AS PARTIDAS, NA REALIDADE SÂO PARTIDAS DIFERENTES MESMO
QUE TENHAM O MESMO ID, PORQUE AS PARTIDAS SÃO DUPLAS BASEADAS NO PONTO DE VISTA DE CADA UM
DOS TIMES, na realidade isso não é problema porque cada um dos lados diferentes tem um teamID
diferente, o que eu sinto que é a razão para minha abordagem dar certo no pensamento da persistencia
no banco de dados

// na hora de persistir as partidas no banco de dados, eu separo elas do time e dou .save ?
'''

# NA VERDADE OS DADOS SAO POR PARTICIPANTE PQP
# kills é a soma de teamkills com teamdeaths
# todos dados seguem a esttrutura do acima
# para verificar se a partida ja esta salva precisa testar o id dela e o id do time


class Match:
    def __init__(self, matchTag, matchLeague, split, date, 
                teamName, teamId, matchDuration, result, 
                kills, dragons, towers) :
        this.name = "match"


matchTag = 0
matchLeague = 3
split = 5
date = 7
teamName = 15
teamId = 16
matchDuration = 28
result = 29
kills = 33 (teamkills) + 34 (teamdeaths)
dragons = 46 (owndragons) + 47(oppdragons)
towers = 70(owntowers) + 71(opptowers)
